-- Alunos:
-- -> Felipe Alves Belisário
-- -> Breno Caldeira Nascimento
-- -> Adiel Pereira Prado

CREATE SCHEMA loja;
SET search_path TO loja;
SET datestyle TO 'DMY';

CREATE TABLE CLIENTE (
   CODCLI INTEGER NOT NULL,
   NOMECLI VARCHAR(50) NOT NULL,
   ENDERECO VARCHAR(60),
   CIDADE CHAR (20) NOT NULL,
   CEP CHAR(10),
   UF CHAR (2) NOT NULL, 
   CGC CHAR(14) NOT NULL,
   PRIMARY KEY (CODCLI)
);

CREATE TABLE VENDEDOR (
   CODVEND INTEGER NOT NULL,
   NOMEVEND VARCHAR(50) NOT NULL,
   SALFIXO FLOAT,
   FAIXACOMIS CHAR NOT NULL,
   PRIMARY KEY (CODVEND)
);

CREATE TABLE PRODUTO (
   CODPROD INTEGER NOT NULL,
   UNIDADE CHAR(2) NOT NULL,
   DESCRI VARCHAR(30) NOT NULL,
   VALUNIT FLOAT,
   PRIMARY KEY (CODPROD)
);

CREATE TABLE PEDIDO (
   NUMPED INTEGER NOT NULL,
   PRAZOENTR INTEGER,
   CODCLI INTEGER NOT NULL,
   CODVEND INTEGER,
   PRIMARY KEY (NUMPED),
   FOREIGN KEY (CODCLI) REFERENCES CLIENTE (CODCLI),
   FOREIGN KEY (CODVEND) REFERENCES VENDEDOR (CODVEND)
);

CREATE TABLE ITEMPED (
   NUMPED INTEGER NOT NULL,
   CODPROD INTEGER NOT NULL,
   QUANT INTEGER,
   PRIMARY KEY (NUMPED, CODPROD),
   FOREIGN KEY (NUMPED) REFERENCES PEDIDO (NUMPED),
   FOREIGN KEY (CODPROD) REFERENCES PRODUTO (CODPROD)
);

INSERT INTO CLIENTE VALUES (20,'BETH DA SILVA','AV. CLIMERIO, 230','SAO PAULO',25678300,'SP','32485211125025');
INSERT INTO CLIENTE VALUES (110,'JORGE BRITO','RUA CAIAPO, 13','CURITIBA',30078500,'PR','14512764983491');
INSERT INTO CLIENTE VALUES (130,'EDMAR CAMARGO','RUA DA PRAIA, S/N','SALVADOR',30099300,'BA','23456890000287');
INSERT INTO CLIENTE VALUES (157,'PAULO SOUSA','TV. MORAES, 230','LONDRINA',89785200,'PR','12748111000125');
INSERT INTO CLIENTE VALUES (180,'LVIO FIGUEIRAS','AV.BEIRA MAR, 1256','FLORIANPOLIS',30001500,'SC','12788888001020');
INSERT INTO CLIENTE VALUES (222,'LUCIA CAMATA','R.ITABIRA, 123 - LOJA 9','BELO HORIZONTE',22124391,'MG','28315213934881');
INSERT INTO CLIENTE VALUES (234,'JOS OLIVEIRA','QUADRA 3, BL.3 - SL.2','BRASLIA',22897100,'DF','21768811000120');
INSERT INTO CLIENTE VALUES (260,'SUSANA OLIVEIRA','R.LOPES MENDES, 200','NITERI',30045500,'RJ','21758855000210');
INSERT INTO CLIENTE VALUES (290,'RENATO SANTIAGO','R.MEIRELES, 200','SAO PAULO',30025400,'SP','13251141000120');
INSERT INTO CLIENTE VALUES (390,'SEBASTIO CORREIA','R.DA IGREJA, 70','UBERABA',30048400,'MG','32179888000120');
INSERT INTO CLIENTE VALUES (410,'RODOLFO BASTOS','LARGO DA LAPA, 27','RIO DE JANEIRO',20101100,'RJ','12833511000387');
INSERT INTO CLIENTE VALUES (720,'ANA FARIAS','RUA 17 , N.19','NITEROI',24358310,'RJ','12113231000134');
INSERT INTO CLIENTE VALUES (830,'MAURICIO FELIX','AV.PAULISTA, 1236 - SL 123','SAO PAULO',3012683,'SP','32816895000256');
INSERT INTO CLIENTE VALUES (870,'FLAVIO CESAR TORRES','AV.PRES.VARGAS, 10','SAO PAULO',22763931,'SP','22534126938790');
INSERT INTO CLIENTE VALUES (871,'JONAS ALBUQUERQUE','AV.PRES.VARGAS, 250','SAO PAULO',22763931,'SP','12345678901234');

-- dados dos VENDEDORES --------

INSERT INTO VENDEDOR VALUES(11,'JOAO SANTOS OLIVEIRA', 2780.00,'C');
INSERT INTO VENDEDOR VALUES(101,'JOAO SANTOS SILVA', 2650.00,'C');
INSERT INTO VENDEDOR VALUES(111,'CARLOS VIEIRA', 2490.00,'A');
INSERT INTO VENDEDOR VALUES(209,'JOSE FELISBERTO', 1800.00,'C');
INSERT INTO VENDEDOR VALUES(213,'JONAS SILVA', 2300.00,'A');
INSERT INTO VENDEDOR VALUES(240,'ANTONIO MORAIS', 9500.00,'C');
INSERT INTO VENDEDOR VALUES(250,'MAURICIO SERRA', 2930.00,'B');
INSERT INTO VENDEDOR VALUES(310,'JOSIAS DA SILVA', 870.00,'B');
INSERT INTO VENDEDOR VALUES(720,'FELIPE NASCIMENTO', 4600.00,'A');
INSERT INTO VENDEDOR VALUES(100,'MARCOS FARIAS', 800.00,'D');
INSERT INTO VENDEDOR VALUES(200,'MONICA DA SILVA', 1600.00,'D');
INSERT INTO VENDEDOR VALUES(280,'SAMANTA DE OLIVEIRA', 3600.00,'C');

-- dados dos PRODUTOS -------- 

INSERT INTO PRODUTO VALUES (13,'G','OURO', 6.18);
INSERT INTO PRODUTO VALUES (22,'M','LINHO', 0.11);
INSERT INTO PRODUTO VALUES (25,'KG','QUEIJO', 0.97);
INSERT INTO PRODUTO VALUES (30,'AS','AUCAR', 0.30);
INSERT INTO PRODUTO VALUES (31,'BA','CHOCOLATE', 0.87);
INSERT INTO PRODUTO VALUES (45,'M','MADEIRA', 0.25);
INSERT INTO PRODUTO VALUES (53,'M','LINHA', 1.80);
INSERT INTO PRODUTO VALUES (77,'M','PAPEL', 1.05);
INSERT INTO PRODUTO VALUES (78,'L','VINHO', 2.00);

-- 1)

CREATE OR REPLACE FUNCTION FUNC_DADOS_VENDEDOR(IN P_COD VENDEDOR.CODVEND%TYPE,
								    OUT P_NOME VENDEDOR.NOMEVEND%TYPE) AS $$
BEGIN
	SELECT NomeVend
	INTO P_NOME
	FROM  VENDEDOR
	WHERE Vendedor.CodVend = P_COD;
	
END $$ LANGUAGE 'plpgsql';

SELECT * FROM FUNC_DADOS_VENDEDOR (240);

CREATE OR REPLACE FUNCTION FUNC_NRO_CLIENTES(IN P_CEP CLIENTE.CEP%TYPE)
RETURNS NUMERIC AS $$
DECLARE  V_CONTA_CEP NUMERIC;
BEGIN
	SELECT COUNT(CODCLI)
	INTO V_CONTA_CEP
	FROM CLIENTE
	WHERE CEP = P_CEP;
	
	RETURN V_CONTA_CEP;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_NRO_CLIENTES('22763931');

CREATE OR REPLACE FUNCTION FUNC_ATUALIZA_SAL_FIXO(IN PERC FLOAT)
RETURNS VOID AS $$
BEGIN
	UPDATE VENDEDOR
	SET SALFIXO = SALFIXO + (SALFIXO * PERC / 100);
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_ATUALIZA_SAL_FIXO(50);
SELECT NOMEVEND, SALFIXO FROM VENDEDOR;

CREATE OR REPLACE FUNCTION
FUNC_CONTA_VENDEDOR (OUT P_QUANT INTEGER)
RETURNS INTEGER AS $$
BEGIN
	SELECT COUNT(*) INTO P_QUANT FROM CLIENTE;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_CONTA_VENDEDOR();

CREATE OR REPLACE FUNCTION DUP(IN INT, OUT F1 INT, OUT F2 TEXT)
RETURNS RECORD AS $$
BEGIN
	SELECT $1, CAST($1 AS text) || ' is text'
	INTO F1, F2;
END $$ LANGUAGE 'plpgsql';

SELECT * FROM DUP(42);



CREATE OR REPLACE FUNCTION FUNC_CADASTRA_PRODUTO( IN P_COD PRODUTO.CODPROD%TYPE , 
												  IN P_NOME PRODUTO.DESCRI%TYPE , 
												  IN P_UN PRODUTO.UNIDADE%TYPE ,
												  IN P_VALOR PRODUTO.VALUNIT%TYPE)
RETURNS VOID AS $$

DECLARE V_CONT INTEGER;
BEGIN
	SELECT COUNT(*)
	INTO V_CONT
	FROM PRODUTO WHERE DESCRI = P_NOME;
	
	IF V_CONT = 0 THEN
		INSERT INTO PRODUTO VALUES( P_COD, P_UN, P_NOME, P_VALOR);
	ELSE
		RAISE WARNING 'Nome de produto duplicado seu corno: %', P_NOME;
	END IF;
	
END $$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION FUNC_EXIBE_CLIENTE ()
RETURNS void AS $$
/* listar o nome e cidade de clientes no programa
aplicativo */
DECLARE tupla record;
BEGIN
FOR tupla IN SELECT * FROM cliente
LOOP
--processamento sobre o cliente
RAISE NOTICE 'NOME CLIENTE: %, CIDADE: %', tupla.nomecli,
tupla.cidade;
END LOOP;
END $$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION FUNC_EXIBE_CLIENTEx ()
RETURNS SETOF CLIENTE AS $$
DECLARE tupla record;
BEGIN
FOR tupla IN SELECT * FROM cliente
LOOP
--processamento sobre o cliente
RETURN NEXT tupla;
END LOOP;
END $$ LANGUAGE 'plpgsql';

-- 2)

--a)

ALTER TABLE cliente ADD TOTALCOMPRAS INTEGER;

CREATE OR REPLACE FUNCTION CALCULA_TOTAL_COMPRAS
(IN C_Cliente cliente.codcli%TYPE, OUT TOTAL cliente.totalcompras%TYPE)
RETURNS cliente.totalcompras%TYPE AS $$
BEGIN

SELECT COUNT(numped)
INTO TOTAL
FROM pedido
WHERE codcli = C_Cliente
GROUP BY codcli;

END $$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION ATRIBUI_TOTAL_COMPRAS()
RETURNS VOID AS $$
BEGIN

UPDATE cliente
SET totalcompras = CALCULA_TOTAL_COMPRAS(codcli);

END $$ LANGUAGE 'plpgsql';

SELECT ATRIBUI_TOTAL_COMPRAS();

SELECT codcli, totalcompras
FROM CLIENTE;

--b)

CREATE OR REPLACE FUNCTION CALCULA_TOTAL_ITEM
(IN Cod_Prod produto.codprod%TYPE,
 IN Qnt_Prod itemped.quant%TYPE)
 RETURNS FLOAT8 AS $$
DECLARE VALOR FLOAT8;
BEGIN

SELECT valunit
INTO VALOR
FROM produto
WHERE codprod = Cod_Prod;

RETURN VALOR * Qnt_Prod;

END $$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION CALCULA_TOTAL_PEDIDO
(IN N_Pedido pedido.numped%TYPE)
 RETURNS FLOAT8 AS $$
DECLARE tupla record;
DECLARE TOTAL FLOAT8;
BEGIN

TOTAL := 0;

FOR tupla IN SELECT codprod, quant FROM itemped WHERE numped = N_Pedido
LOOP

TOTAL := TOTAL + (SELECT CALCULA_TOTAL_ITEM(tupla.codprod,tupla.quant));
							
END LOOP;

RETURN TOTAL;

END $$ LANGUAGE 'plpgsql';
							  
SELECT numped, CALCULA_TOTAL_PEDIDO(303)
FROM pedido
WHERE numped = 303;

/*
SELECT pe.numped, it.codprod, it.quant, pr.valunit
FROM pedido pe, produto pr, itemped it
WHERE pe.numped = 303 and pe.numped = it.numped and it.codprod = pr.codprod
*/

--c)

CREATE OR REPLACE FUNCTION ADD_CLIENTE_VENDEDOR(
IN cli_cod cliente.codcli%TYPE,
IN cli_nome cliente.nomecli%TYPE,
IN cli_end cliente.endereco%TYPE,
IN cli_cid cliente.cidade%TYPE,
IN cli_cep cliente.cep%TYPE,
IN cli_uf cliente.uf%TYPE,
IN cli_cgc cliente.cgc%TYPE,
IN cli_total cliente.totalcompras%TYPE,
IN vend_cod vendedor.codvend%TYPE,
IN vend_nome vendedor.nomevend%TYPE,
IN vend_sal vendedor.salfixo%TYPE,
IN vend_faixa vendedor.faixacomis%TYPE)
RETURNS VOID AS $$
BEGIN

INSERT INTO CLIENTE VALUES (cli_cod,cli_nome,cli_end,cli_cid,cli_uf,cli_cgc,cli_total);
INSERT INTO VENDEDOR VALUES (vend_cod,vend_nome,vend_sal,vend_faixa);

END $$ LANGUAGE 'plpgsql';

SELECT *
FROM cliente;

SELECT *
FROM vendedor;

SELECT ADD_CLIENTE_VENDEDOR(301, 'ROBERTO CARLOS', 'RUA DAS PALMEIRAS, 45', 'UBERLÂNDIA', 29845908, 'MG', '72485211125985', NULL, 124, 'CARLOS AUGUSTO', 1560.00, 'C');

SELECT *
FROM cliente;

SELECT *
FROM vendedor;

--d)

CREATE OR REPLACE FUNCTION ADD_PRODUTO
(IN Cod_Prod produto.codprod%TYPE,
IN Prod_Unidade produto.unidade%TYPE,
IN Prod_Desc produto.descri%TYPE,
IN Prod_Valor produto.valunit%TYPE)
RETURNS VOID AS $$
BEGIN

CASE
	WHEN Cod_Prod IS NULL THEN
		RAISE WARNING 'Código do produto não pode ser vazio!';
	WHEN Prod_Unidade = ' ' THEN
		RAISE WARNING 'Unidade do produto não pode ser vazio!';
	WHEN Prod_Desc = ' ' THEN
		RAISE WARNING 'Descrição do produto não pode ser vazio!';
	ELSE
		INSERT INTO PRODUTO VALUES (Cod_Prod,Prod_Unidade,Prod_Desc, Prod_Valor);
	END CASE;

END $$ LANGUAGE 'plpgsql';

SELECT ADD_PRODUTO(120, ' ', 'Pão', 0.50);	-- Erro não detectado pelo SGBD -> Unidade não pode ser vazia
SELECT ADD_PRODUTO(120, NULL, 'Pão', 0.50);	-- Erro detectado pelo SGBD -> Unidade não pode ser NULL
